# Use ggplot to create heatmap with hierarchically sorted rows and columns
g <- ggplot(cor_matrix, aes(colnames, colnames)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Perform hierarchical clustering on rows and columns
hc_rows <- hclust(dist(cor_matrix))
hc_cols <- hclust(dist(t(cor_matrix)))
# Reorder rows and columns based on hierarchical clustering
cor_matrix <- cor_matrix[hc_rows$order, hc_cols$order]
# Add labels and dendrogram
g <- g +
geom_segment(aes(x = 1:10, , y = 1:10),
color = "black", size = 0.5)
g
# Create dataframe with 10x10000 random standard uniform data
df <- data.frame(matrix(runif(10*10000), ncol = 10))
colnames = paste0("f", 0:9)
colnames(df) <- colnames
# Compute correlation matrix
cor_matrix <- data.frame(cor(df))
# Use ggplot to create heatmap with hierarchically sorted rows and columns
g <- ggplot(cor_matrix, aes(colnames, colnames)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Perform hierarchical clustering on rows and columns
hc_rows <- hclust(dist(cor_matrix))
hc_cols <- hclust(dist(t(cor_matrix)))
# Reorder rows and columns based on hierarchical clustering
cor_matrix <- cor_matrix[hc_rows$order, hc_cols$order]
# Add labels and dendrogram
g <- g +
#  geom_text(aes(x = colnames, y = colnames), color = "white") +
geom_segment(aes(x = 0, xend = 10, y = hc_rows$height, yend = hc_rows$height),
color = "black", size = 0.5) +
geom_segment(aes(x = hc_cols$height, xend = hc_cols$height, y = 0, yend = 10),
color = "black", size = 0.5) +
3
# Create dataframe with 10x10000 random standard uniform data
df <- data.frame(matrix(runif(10*10000), ncol = 10))
colnames = paste0("f", 0:9)
colnames(df) <- colnames
# Compute correlation matrix
cor_matrix <- data.frame(cor(df))
# Use ggplot to create heatmap with hierarchically sorted rows and columns
g <- ggplot(cor_matrix, aes(colnames, colnames)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Perform hierarchical clustering on rows and columns
hc_rows <- hclust(dist(cor_matrix))
hc_cols <- hclust(dist(t(cor_matrix)))
# Reorder rows and columns based on hierarchical clustering
cor_matrix <- cor_matrix[hc_rows$order, hc_cols$order]
# Add labels and dendrogram
g <- g +
#  geom_text(aes(x = colnames, y = colnames), color = "white") +
geom_segment(aes(x = 0, xend = 10, y = hc_rows$height, yend = hc_rows$height),
color = "black", size = 0.5) +
geom_segment(aes(x = hc_cols$height, xend = hc_cols$height, y = 0, yend = 10),
color = "black", size = 0.5)
g
hc_rows$height
hc_rows$height
# Create dataframe with 10x10000 random standard uniform data
df <- data.frame(matrix(runif(10*10000), ncol = 10))
colnames = paste0("f", 0:9)
colnames(df) <- colnames
# Compute correlation matrix
cor_matrix <- data.frame(cor(df))
# Use ggplot to create heatmap with hierarchically sorted rows and columns
g <- ggplot(cor_matrix, aes(colnames, colnames)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Perform hierarchical clustering on rows and columns
hc_rows <- hclust(dist(cor_matrix))
hc_cols <- hclust(dist(t(cor_matrix)))
# Reorder rows and columns based on hierarchical clustering
cor_matrix <- cor_matrix[hc_rows$order, hc_cols$order]
# Add labels and dendrogram
g <- g +
#  geom_text(aes(x = colnames, y = colnames), color = "white") +
geom_segment(aes(x = 0, xend = 10, y = 0, yend = 10),
color = "black", size = 0.5) +
g
# Create dataframe with 10x10000 random standard uniform data
df <- data.frame(matrix(runif(10*10000), ncol = 10))
colnames = paste0("f", 0:9)
colnames(df) <- colnames
# Compute correlation matrix
cor_matrix <- data.frame(cor(df))
# Use ggplot to create heatmap with hierarchically sorted rows and columns
g <- ggplot(cor_matrix, aes(colnames, colnames)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Perform hierarchical clustering on rows and columns
hc_rows <- hclust(dist(cor_matrix))
hc_cols <- hclust(dist(t(cor_matrix)))
# Reorder rows and columns based on hierarchical clustering
cor_matrix <- cor_matrix[hc_rows$order, hc_cols$order]
# Add labels and dendrogram
g <- g +
#  geom_text(aes(x = colnames, y = colnames), color = "white") +
geom_segment(aes(x = 0, xend = 10, y = 0, yend = 10),
color = "black", size = 0.5)
g
g <- ggplot(cor_matrix, aes(colnames, colnames)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Perform hierarchical clustering on rows and columns
hc_rows <- hclust(dist(cor_matrix))
hc_cols <- hclust(dist(t(cor_matrix)))
# Reorder rows and columns based on hierarchical clustering
cor_matrix <- cor_matrix[hc_rows$order, hc_cols$order]
# Add labels and dendrogram
g <- g +
#  geom_text(aes(x = colnames, y = colnames), color = "white") +
geom_segment(aes(x = hc_cols$height, xend = hc_cols$height, y = hc_cols$height, yend = hc_cols$height),
color = "black", size = 0.5)
g
hc_cols$height
length(hc_cols$height)
hc_rows
hc_rows
hc_rows$height
length(hc_rows$height)
cat
cat(c(0), hc_rows$height)
df <- data.frame(matrix(runif(10*10000), ncol = 10))
colnames = paste0("f", 0:9)
colnames(df) <- colnames
# Compute correlation matrix
cor_matrix <- data.frame(cor(df))
# Use ggplot to create heatmap with hierarchically sorted rows and columns
g <- ggplot(cor_matrix, aes(colnames, colnames)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Perform hierarchical clustering on rows and columns
hc_rows <- hclust(dist(cor_matrix))
hc_cols <- hclust(dist(t(cor_matrix)))
# Reorder rows and columns based on hierarchical clustering
cor_matrix <- cor_matrix[hc_rows$order, hc_cols$order]
# Add labels and dendrogram
g <- g +
#geom_text(aes(x = Var1, y = Var2, label = round(value, 2)), color = "white") +
geom_segment(aes(x = 0, xend = 10, y = cat(c(0), hc_rows$height), yend = cat(c(0), hc_rows$height)),
color = "black", size = 0.5) +
d
df <- data.frame(matrix(runif(10*10000), ncol = 10))
colnames = paste0("f", 0:9)
colnames(df) <- colnames
# Compute correlation matrix
cor_matrix <- data.frame(cor(df))
# Use ggplot to create heatmap with hierarchically sorted rows and columns
g <- ggplot(cor_matrix, aes(colnames, colnames)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Perform hierarchical clustering on rows and columns
hc_rows <- hclust(dist(cor_matrix))
hc_cols <- hclust(dist(t(cor_matrix)))
# Reorder rows and columns based on hierarchical clustering
cor_matrix <- cor_matrix[hc_rows$order, hc_cols$order]
# Add labels and dendrogram
g <- g +
#geom_text(aes(x = Var1, y = Var2, label = round(value, 2)), color = "white") +
geom_segment(aes(x = 0, xend = 10, y = cat(c(0), hc_rows$height), yend = cat(c(0), hc_rows$height)),
color = "black", size = 0.5)
g
aes(x = 0, xend = 10, y = cat(c(0), hc_rows$height), yend = cat(c(0), hc_rows$height))
cor_matrix <- data.frame(cor(df))
# Use ggplot to create heatmap with hierarchically sorted rows and columns
g <- ggplot(cor_matrix, aes(colnames, colnames)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Perform hierarchical clustering on rows and columns
hc_rows <- hclust(dist(cor_matrix))
hc_cols <- hclust(dist(t(cor_matrix)))
# Reorder rows and columns based on hierarchical clustering
cor_matrix <- cor_matrix[hc_rows$order, hc_cols$order]
# Add labels and dendrogram
g <- g +
#geom_text(aes(x = Var1, y = Var2, label = round(value, 2)), color = "white") +
geom_segment(aes(x = 0, xend = 10, y = cat(c(0), hc_rows$height), yend = cat(c(0), hc_rows$height)),
color = "black", size = 0.5) +
geom_segment(aes(x = hc_cols$height, xend = hc_cols$height, y = 0, yend = 10),
color = "black", size = 0.5) +
scale_x_discrete(limits = colnames(cor_matrix)) +
scale_y_discrete(limits = colnames(cor_matrix)) +
ggtitle("Heatmap of Correlation Matrix")
# Create dataframe with 10x10000 random standard uniform data
df <- data.frame(matrix(runif(10*10000), ncol = 10))
colnames = paste0("f", 0:9)
colnames(df) <- colnames
# Compute correlation matrix
cor_matrix <- data.frame(cor(df))
# Use ggplot to create heatmap with hierarchically sorted rows and columns
g <- ggplot(cor_matrix, aes(colnames, colnames)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Perform hierarchical clustering on rows and columns
hc_rows <- hclust(dist(cor_matrix))
hc_cols <- hclust(dist(t(cor_matrix)))
# Reorder rows and columns based on hierarchical clustering
cor_matrix <- cor_matrix[hc_rows$order, hc_cols$order]
# Add labels and dendrogram
g <- g +
#geom_text(aes(x = Var1, y = Var2, label = round(value, 2)), color = "white") +
geom_segment(aes(x = 0, xend = 10, y = cat(c(0), hc_rows$height), yend = cat(c(0), hc_rows$height)),
color = "black", size = 0.5)
g
hc_rows$height
cat(c(0), hc_rows$height)
cat(list(0), hc_rows$height)
cat(0, hc_rows$height)
cat(0, hc_rows$height)
list(0)
cat(list(0), hc_rows$height)
list(0)[0]
list(0)[1]
list(0)[1:2]
list(0)[1]
B = hc_rows$height
B2 = cat(0, hc_rows$height)
typeof(B)
typeof(c(0))
c(0)
B2 = cat(c(0), hc_rows$height)
B2
B2 <- cat(c(0), hc_rows$height)
B2 <- c(0) + hc_rows$height
B2
B2 <- c(0) + hc_rows$height
c(0) + hc_rows$height
c(c(0), hc_rows$height)
B2 = c(c(0), hc_rows$height)
g <- g +
#geom_text(aes(x = Var1, y = Var2, label = round(value, 2)), color = "white") +
geom_segment(aes(x = 0, xend = 10, y = c(c(0), hc_rows$height), yend = c(c(0), hc_rows$height)),
color = "black", size = 0.5) +
geom_segment(aes(x = hc_cols$height, xend = hc_cols$height, y = 0, yend = 10),
color = "black", size = 0.5) +
scale_x_discrete(limits = colnames(cor_matrix)) +
scale_y_discrete(limits = colnames(cor_matrix)) +
ggtitle("Heatmap of Correlation Matrix")
g
# Create dataframe with 10x10000 random standard uniform data
df <- data.frame(matrix(runif(10*10000), ncol = 10))
colnames = paste0("f", 0:9)
colnames(df) <- colnames
# Compute correlation matrix
cor_matrix <- data.frame(cor(df))
# Use ggplot to create heatmap with hierarchically sorted rows and columns
g <- ggplot(cor_matrix, aes(colnames, colnames)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Perform hierarchical clustering on rows and columns
hc_rows <- hclust(dist(cor_matrix))
hc_cols <- hclust(dist(t(cor_matrix)))
# Reorder rows and columns based on hierarchical clustering
cor_matrix <- cor_matrix[hc_rows$order, hc_cols$order]
# Add labels and dendrogram
g <- g +
#geom_text(aes(x = Var1, y = Var2, label = round(value, 2)), color = "white") +
geom_segment(aes(x = 0, xend = 10, y = c(c(0), hc_rows$height), yend = c(c(0), hc_rows$height)),
color = "black", size = 0.5) +
g
# Create dataframe with 10x10000 random standard uniform data
df <- data.frame(matrix(runif(10*10000), ncol = 10))
colnames = paste0("f", 0:9)
colnames(df) <- colnames
# Compute correlation matrix
cor_matrix <- data.frame(cor(df))
# Use ggplot to create heatmap with hierarchically sorted rows and columns
g <- ggplot(cor_matrix, aes(colnames, colnames)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Perform hierarchical clustering on rows and columns
hc_rows <- hclust(dist(cor_matrix))
hc_cols <- hclust(dist(t(cor_matrix)))
# Reorder rows and columns based on hierarchical clustering
cor_matrix <- cor_matrix[hc_rows$order, hc_cols$order]
# Add labels and dendrogram
g <- g +
#geom_text(aes(x = Var1, y = Var2, label = round(value, 2)), color = "white") +
geom_segment(aes(x = 0, xend = 10, y = c(c(0), hc_rows$height), yend = c(c(0), hc_rows$height)),
color = "black", size = 0.5)
g
# Create dataframe with 10x10000 random standard uniform data
df <- data.frame(matrix(runif(10*10000), ncol = 10))
colnames = paste0("f", 0:9)
colnames(df) <- colnames
# Compute correlation matrix
cor_matrix <- data.frame(cor(df))
# Use ggplot to create heatmap with hierarchically sorted rows and columns
g <- ggplot(cor_matrix, aes(colnames, colnames)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Perform hierarchical clustering on rows and columns
hc_rows <- hclust(dist(cor_matrix))
hc_cols <- hclust(dist(t(cor_matrix)))
# Reorder rows and columns based on hierarchical clustering
cor_matrix <- cor_matrix[hc_rows$order, hc_cols$order]
# Add labels and dendrogram
g <- g +
# geom_text(aes(x = Var1, y = Var2, label = round(value, 2)), color = "white") +
geom_segment(aes(x = 0, xend = 10, y = c(c(0), hc_rows$height), yend = c(c(0), hc_rows$height)),
color = "black", size = 0.5) +
geom_segment(aes(x = c(c(0), hc_rows$height), xend = c(c(0), hc_rows$height), y = 0, yend = 10),
color = "black", size = 0.5) +
scale_x_discrete(limits = colnames(cor_matrix)) +
scale_y_discrete(limits = colnames(cor_matrix)) +
ggtitle("Heatmap of Correlation Matrix")
g
# Create dataframe with 10x10000 random standard uniform data
df <- data.frame(matrix(runif(10*10000), ncol = 10))
colnames = paste0("f", 0:9)
colnames(df) <- colnames
# Compute correlation matrix
cor_matrix <- data.frame(cor(df))
# Use ggplot to create heatmap with hierarchically sorted rows and columns
g <- ggplot(cor_matrix, aes(colnames, colnames)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Perform hierarchical clustering on rows and columns
hc_rows <- hclust(dist(cor_matrix))
hc_cols <- hclust(dist(t(cor_matrix)))
# Reorder rows and columns based on hierarchical clustering
cor_matrix <- cor_matrix[hc_rows$order, hc_cols$order]
# Add labels and dendrogram
g <- g +
# geom_text(aes(x = Var1, y = Var2, label = round(value, 2)), color = "white") +
geom_segment(aes(x = 0, xend = 10, y = c(c(0), hc_rows$height), yend = c(c(0), hc_rows$height)),
color = "black", size = 0.5) +
geom_segment(aes(x = c(c(0), hc_rows$height), xend = c(c(0), hc_rows$height), y = 0, yend = 10),
color = "black", size = 0.5) +
scale_x_discrete(limits = colnames(cor_matrix)) +
scale_y_discrete(limits = colnames(cor_matrix)) +
ggtitle("Heatmap of Correlation Matrix")
g
# Create dataframe with 10x10000 random standard uniform data
df <- data.frame(matrix(runif(10*10000), ncol = 10))
colnames = paste0("f", 0:9)
colnames(df) <- colnames
# Compute correlation matrix
cor_matrix <- data.frame(cor(df))
# Use ggplot to create heatmap with hierarchically sorted rows and columns
g <- ggplot(cor_matrix, aes(colnames, colnames)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Perform hierarchical clustering on rows and columns
hc_rows <- hclust(dist(cor_matrix))
hc_cols <- hclust(dist(t(cor_matrix)))
# Reorder rows and columns based on hierarchical clustering
cor_matrix <- cor_matrix[hc_rows$order, hc_cols$order]
g
dist(cor_matrix)
otter_dendro <- as.dendrogram(hc_rows)
otter_dendro
hc_dendro <- as.dendrogram(hclust(dist(cor_matrix)))
dendro_plot <- ggdendrogram(data = hc_dendro, rotate = FALSE)
library(ggdendro)
packages.install("ggdendro")
packages.install("ggdendro")
install.packages("ggdendro")
library(ggdendro)
# Perform hierarchical clustering on rows and columns
hc_dendro <- as.dendrogram(hclust(dist(cor_matrix)))
dendro_plot <- ggdendrogram(data = hc_dendro, rotate = FALSE)
dendro_plot
install.packages("pheatmap")
library(pheatmap)
pheatmap(cor_matrix, main = "pheatmap default")
setwd("C:/Users/JohnGregg/Desktop/greggj2016.github.io")
library(reticulate)
use_condaenv("STAR_outliers")
library(reticulate)
use_condaenv("STAR_outliers")
library(reticulate)
use_condaenv("STAR_outliers")
use_condaenv("STAR_outliers", required = TRUE)
conda_list()
use_python("C:\\Users\\JohnGregg\\miniconda3\\envs\\STAR_outliers\\python.exe")
RETICULATE_PYTHON
conda_list()
#For a demonstration of a line plot on a polar axis, see @fig-polar.
library(reticulate)
conda_list()
Sys.setenv
conda_env <- "C:\\Users\\JohnGregg\\miniconda3\\envs\\STAR_outliers\\python.exe"
conda_env
Sys.setenv(RETICULATE_PYTHON = conda_env)
conda_env <- "C:\\Users\\JohnGregg\\miniconda3\\envs\\STAR_outliers\\python.exe"
Sys.setenv(RETICULATE_PYTHON = conda_env)
conda_env <- "C:\\Users\\JohnGregg\\miniconda3\\envs\\STAR_outliers\\python.exe"
Sys.setenv(RETICULATE_PYTHON = conda_env)
conda_env <- "C:\\Users\\JohnGregg\\miniconda3\\envs\\nonsense\\python.exe"
Sys.setenv(RETICULATE_PYTHON = conda_env)
Sys.getenv("RETICULATE_PYTHON ")
Sys.getenv("RETICULATE_PYTHON")
conda_env <- "C:\Users\JohnGregg\miniconda3\envs\STAR_outliers\python.exe"
conda_env <- "C:\Users\JohnGregg\miniconda3\envs\STAR_outliers\python.exe"
conda_env <- "C:\\Users\\JohnGregg\\miniconda3\\envs\\STAR_outliers\\python.exe"
Sys.setenv(RETICULATE_PYTHON = conda_env)
Sys.getenv("RETICULATE_PYTHON")
conda_list()
library(reticulate)
conda_list()
conda_env <- "C:\\Users\\JohnGregg\\miniconda3\\envs\\STAR_outliers/python.exe"
Sys.setenv(RETICULATE_PYTHON = conda_env)
conda_env <- "C:/Users/JohnGregg/miniconda3/envs/STAR_outliers/python.exe"
Sys.setenv(RETICULATE_PYTHON = conda_env)
library(reticulate)
Sys.getenv("RETICULATE_PYTHON")
Sys.setenv(RETICULATE_PYTHON = conda_env)
conda_env <- "C:\\Users\\JohnGregg\\miniconda3\\envs\\STAR_outliers\\python.exe"
Sys.setenv(RETICULATE_PYTHON = conda_env)
Sys.getenv("RETICULATE_PYTHON")
Sys.getenv("comspec")
print(Sys.getenv("comspec"))
conda_env <- "C:\\Users\\JohnGregg\\miniconda3\\envs\\STAR_outliers\\python.exe"
Sys.setenv(RETICULATE_PYTHON = conda_env)
py_module_available("numpy")
py_module_available("numpy")
py_module_available("jupyter")
py_module_available("jupyter")
py_module_available("jupyter")
library(reticulate)
py_module_available("jupyter")
conda_env <- "C:\\Users\\JohnGregg\\miniconda3\\envs\\STAR_outliers\\python.exe"
Sys.setenv(RETICULATE_PYTHON = conda_env)
library(reticulate)
py_module_available("jupyter")
conda_env <- "C:\\Users\\JohnGregg\\miniconda3\\envs\\STAR_outliers\\python.exe"
Sys.setenv(RETICULATE_PYTHON = conda_env)
library(reticulate)
py_module_available("jupyter")
py_module_available("jupyter")
conda_env <- "C:\\Users\\JohnGregg\\miniconda3\\envs\\STAR_outliers\\python.exe"
Sys.setenv(RETICULATE_PYTHON = conda_env)
library(reticulate)
py_module_available("jupyter")
conda_env <- "C:\\Users\\JohnGregg\\miniconda3\\envs\\STAR_outliers\\python.exe"
Sys.setenv(RETICULATE_PYTHON = conda_env)
library(reticulate)
py_module_available("numpy")
conda_env <- "C:\\Users\\JohnGregg\\miniconda3\\envs\\STAR_outliers\\python.exe"
Sys.setenv(RETICULATE_PYTHON = conda_env)
library(reticulate)
py_module_available("numpy")
conda_env <- "C:\\Users\\JohnGregg\\miniconda3\\envs\\STAR_outliers\\python.exe"
Sys.setenv(RETICULATE_PYTHON = conda_env)
library(reticulate)
py_module_available("numpy")
conda_env <- "C:\\Users\\JohnGregg\\miniconda3\\envs\\STAR_outliers\\python.exe"
Sys.setenv(RETICULATE_PYTHON = conda_env)
conda_env <- "C:\\Users\\JohnGregg\\miniconda3\\envs\\STAR_outliers\\python.exe"
Sys.setenv(RETICULATE_PYTHON = conda_env)
library(reticulate)
py_module_available("jupyter")
conda_env <- "C:\\Users\\JohnGregg\\miniconda3\\envs\\STAR_outliers\\python.exe"
Sys.setenv(RETICULATE_PYTHON = conda_env)
library(reticulate)
conda_env <- "C:\\Users\\JohnGregg\\miniconda3\\envs\\STAR_outliers\\python.exe"
Sys.setenv(RETICULATE_PYTHON = conda_env)
library(reticulate)
py_module_available("jupyter")
reticulate::repl_python()
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"
import numpy as np
import matplotlib.pyplot as plt
r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
subplot_kw = {'projection': 'polar'}
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.savefig("aaa.png")
conda_env <- "C:\\Users\\JohnGregg\\miniconda3\\envs\\STAR_outliers\\python.exe"
Sys.setenv(RETICULATE_PYTHON = conda_env)
library(reticulate)
py_module_available("jupyter")
